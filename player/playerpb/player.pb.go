// Code generated by protoc-gen-go. DO NOT EDIT.
// source: player.proto

package playerpb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import timestamp "github.com/golang/protobuf/ptypes/timestamp"
import reflexpb "github.com/luno/reflex/reflexpb"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetPartsReq struct {
	ExternalId           int64    `protobuf:"varint,1,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPartsReq) Reset()         { *m = GetPartsReq{} }
func (m *GetPartsReq) String() string { return proto.CompactTextString(m) }
func (*GetPartsReq) ProtoMessage()    {}
func (*GetPartsReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_7716394df972353b, []int{0}
}
func (m *GetPartsReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPartsReq.Unmarshal(m, b)
}
func (m *GetPartsReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPartsReq.Marshal(b, m, deterministic)
}
func (dst *GetPartsReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartsReq.Merge(dst, src)
}
func (m *GetPartsReq) XXX_Size() int {
	return xxx_messageInfo_GetPartsReq.Size(m)
}
func (m *GetPartsReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartsReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartsReq proto.InternalMessageInfo

func (m *GetPartsReq) GetExternalId() int64 {
	if m != nil {
		return m.ExternalId
	}
	return 0
}

type GetPartsResp struct {
	Parts                []*Part  `protobuf:"bytes,1,rep,name=parts,proto3" json:"parts,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetPartsResp) Reset()         { *m = GetPartsResp{} }
func (m *GetPartsResp) String() string { return proto.CompactTextString(m) }
func (*GetPartsResp) ProtoMessage()    {}
func (*GetPartsResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_7716394df972353b, []int{1}
}
func (m *GetPartsResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetPartsResp.Unmarshal(m, b)
}
func (m *GetPartsResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetPartsResp.Marshal(b, m, deterministic)
}
func (dst *GetPartsResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetPartsResp.Merge(dst, src)
}
func (m *GetPartsResp) XXX_Size() int {
	return xxx_messageInfo_GetPartsResp.Size(m)
}
func (m *GetPartsResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetPartsResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetPartsResp proto.InternalMessageInfo

func (m *GetPartsResp) GetParts() []*Part {
	if m != nil {
		return m.Parts
	}
	return nil
}

type GetRoundReq struct {
	RoundId              int64    `protobuf:"varint,1,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoundReq) Reset()         { *m = GetRoundReq{} }
func (m *GetRoundReq) String() string { return proto.CompactTextString(m) }
func (*GetRoundReq) ProtoMessage()    {}
func (*GetRoundReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_7716394df972353b, []int{2}
}
func (m *GetRoundReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundReq.Unmarshal(m, b)
}
func (m *GetRoundReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundReq.Marshal(b, m, deterministic)
}
func (dst *GetRoundReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundReq.Merge(dst, src)
}
func (m *GetRoundReq) XXX_Size() int {
	return xxx_messageInfo_GetRoundReq.Size(m)
}
func (m *GetRoundReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundReq.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundReq proto.InternalMessageInfo

func (m *GetRoundReq) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

type GetRoundResp struct {
	Round                *Round   `protobuf:"bytes,1,opt,name=round,proto3" json:"round,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetRoundResp) Reset()         { *m = GetRoundResp{} }
func (m *GetRoundResp) String() string { return proto.CompactTextString(m) }
func (*GetRoundResp) ProtoMessage()    {}
func (*GetRoundResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_7716394df972353b, []int{3}
}
func (m *GetRoundResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetRoundResp.Unmarshal(m, b)
}
func (m *GetRoundResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetRoundResp.Marshal(b, m, deterministic)
}
func (dst *GetRoundResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetRoundResp.Merge(dst, src)
}
func (m *GetRoundResp) XXX_Size() int {
	return xxx_messageInfo_GetRoundResp.Size(m)
}
func (m *GetRoundResp) XXX_DiscardUnknown() {
	xxx_messageInfo_GetRoundResp.DiscardUnknown(m)
}

var xxx_messageInfo_GetRoundResp proto.InternalMessageInfo

func (m *GetRoundResp) GetRound() *Round {
	if m != nil {
		return m.Round
	}
	return nil
}

type Round struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ExternalId           int64                `protobuf:"varint,2,opt,name=external_id,json=externalId,proto3" json:"external_id,omitempty"`
	Player               string               `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	Status               int32                `protobuf:"varint,4,opt,name=status,proto3" json:"status,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Round) Reset()         { *m = Round{} }
func (m *Round) String() string { return proto.CompactTextString(m) }
func (*Round) ProtoMessage()    {}
func (*Round) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_7716394df972353b, []int{4}
}
func (m *Round) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Round.Unmarshal(m, b)
}
func (m *Round) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Round.Marshal(b, m, deterministic)
}
func (dst *Round) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Round.Merge(dst, src)
}
func (m *Round) XXX_Size() int {
	return xxx_messageInfo_Round.Size(m)
}
func (m *Round) XXX_DiscardUnknown() {
	xxx_messageInfo_Round.DiscardUnknown(m)
}

var xxx_messageInfo_Round proto.InternalMessageInfo

func (m *Round) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Round) GetExternalId() int64 {
	if m != nil {
		return m.ExternalId
	}
	return 0
}

func (m *Round) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *Round) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Round) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Round) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

type Part struct {
	Id                   int64                `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	RoundId              int64                `protobuf:"varint,2,opt,name=round_id,json=roundId,proto3" json:"round_id,omitempty"`
	Player               string               `protobuf:"bytes,3,opt,name=player,proto3" json:"player,omitempty"`
	Rank                 int64                `protobuf:"varint,4,opt,name=rank,proto3" json:"rank,omitempty"`
	Value                int64                `protobuf:"varint,5,opt,name=value,proto3" json:"value,omitempty"`
	Submitted            bool                 `protobuf:"varint,6,opt,name=submitted,proto3" json:"submitted,omitempty"`
	CreatedAt            *timestamp.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	UpdatedAt            *timestamp.Timestamp `protobuf:"bytes,8,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Part) Reset()         { *m = Part{} }
func (m *Part) String() string { return proto.CompactTextString(m) }
func (*Part) ProtoMessage()    {}
func (*Part) Descriptor() ([]byte, []int) {
	return fileDescriptor_player_7716394df972353b, []int{5}
}
func (m *Part) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Part.Unmarshal(m, b)
}
func (m *Part) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Part.Marshal(b, m, deterministic)
}
func (dst *Part) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Part.Merge(dst, src)
}
func (m *Part) XXX_Size() int {
	return xxx_messageInfo_Part.Size(m)
}
func (m *Part) XXX_DiscardUnknown() {
	xxx_messageInfo_Part.DiscardUnknown(m)
}

var xxx_messageInfo_Part proto.InternalMessageInfo

func (m *Part) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Part) GetRoundId() int64 {
	if m != nil {
		return m.RoundId
	}
	return 0
}

func (m *Part) GetPlayer() string {
	if m != nil {
		return m.Player
	}
	return ""
}

func (m *Part) GetRank() int64 {
	if m != nil {
		return m.Rank
	}
	return 0
}

func (m *Part) GetValue() int64 {
	if m != nil {
		return m.Value
	}
	return 0
}

func (m *Part) GetSubmitted() bool {
	if m != nil {
		return m.Submitted
	}
	return false
}

func (m *Part) GetCreatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *Part) GetUpdatedAt() *timestamp.Timestamp {
	if m != nil {
		return m.UpdatedAt
	}
	return nil
}

func init() {
	proto.RegisterType((*GetPartsReq)(nil), "playerpb.GetPartsReq")
	proto.RegisterType((*GetPartsResp)(nil), "playerpb.GetPartsResp")
	proto.RegisterType((*GetRoundReq)(nil), "playerpb.GetRoundReq")
	proto.RegisterType((*GetRoundResp)(nil), "playerpb.GetRoundResp")
	proto.RegisterType((*Round)(nil), "playerpb.Round")
	proto.RegisterType((*Part)(nil), "playerpb.Part")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PlayerClient is the client API for Player service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PlayerClient interface {
	StreamRoundEvents(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Player_StreamRoundEventsClient, error)
	GetParts(ctx context.Context, in *GetPartsReq, opts ...grpc.CallOption) (*GetPartsResp, error)
	GetRound(ctx context.Context, in *GetRoundReq, opts ...grpc.CallOption) (*GetRoundResp, error)
}

type playerClient struct {
	cc *grpc.ClientConn
}

func NewPlayerClient(cc *grpc.ClientConn) PlayerClient {
	return &playerClient{cc}
}

func (c *playerClient) StreamRoundEvents(ctx context.Context, in *reflexpb.StreamRequest, opts ...grpc.CallOption) (Player_StreamRoundEventsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Player_serviceDesc.Streams[0], "/playerpb.Player/StreamRoundEvents", opts...)
	if err != nil {
		return nil, err
	}
	x := &playerStreamRoundEventsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Player_StreamRoundEventsClient interface {
	Recv() (*reflexpb.Event, error)
	grpc.ClientStream
}

type playerStreamRoundEventsClient struct {
	grpc.ClientStream
}

func (x *playerStreamRoundEventsClient) Recv() (*reflexpb.Event, error) {
	m := new(reflexpb.Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *playerClient) GetParts(ctx context.Context, in *GetPartsReq, opts ...grpc.CallOption) (*GetPartsResp, error) {
	out := new(GetPartsResp)
	err := c.cc.Invoke(ctx, "/playerpb.Player/GetParts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *playerClient) GetRound(ctx context.Context, in *GetRoundReq, opts ...grpc.CallOption) (*GetRoundResp, error) {
	out := new(GetRoundResp)
	err := c.cc.Invoke(ctx, "/playerpb.Player/GetRound", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PlayerServer is the server API for Player service.
type PlayerServer interface {
	StreamRoundEvents(*reflexpb.StreamRequest, Player_StreamRoundEventsServer) error
	GetParts(context.Context, *GetPartsReq) (*GetPartsResp, error)
	GetRound(context.Context, *GetRoundReq) (*GetRoundResp, error)
}

func RegisterPlayerServer(s *grpc.Server, srv PlayerServer) {
	s.RegisterService(&_Player_serviceDesc, srv)
}

func _Player_StreamRoundEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(reflexpb.StreamRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PlayerServer).StreamRoundEvents(m, &playerStreamRoundEventsServer{stream})
}

type Player_StreamRoundEventsServer interface {
	Send(*reflexpb.Event) error
	grpc.ServerStream
}

type playerStreamRoundEventsServer struct {
	grpc.ServerStream
}

func (x *playerStreamRoundEventsServer) Send(m *reflexpb.Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Player_GetParts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPartsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetParts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playerpb.Player/GetParts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetParts(ctx, req.(*GetPartsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Player_GetRound_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRoundReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PlayerServer).GetRound(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/playerpb.Player/GetRound",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PlayerServer).GetRound(ctx, req.(*GetRoundReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Player_serviceDesc = grpc.ServiceDesc{
	ServiceName: "playerpb.Player",
	HandlerType: (*PlayerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetParts",
			Handler:    _Player_GetParts_Handler,
		},
		{
			MethodName: "GetRound",
			Handler:    _Player_GetRound_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamRoundEvents",
			Handler:       _Player_StreamRoundEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "player.proto",
}

func init() { proto.RegisterFile("player.proto", fileDescriptor_player_7716394df972353b) }

var fileDescriptor_player_7716394df972353b = []byte{
	// 463 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x53, 0x5d, 0x6f, 0xd3, 0x30,
	0x14, 0x6d, 0xda, 0xa6, 0x4d, 0x6f, 0xa7, 0x4d, 0x58, 0x30, 0x42, 0x84, 0xb4, 0x2a, 0x02, 0x29,
	0x0f, 0xc8, 0x45, 0x05, 0x1e, 0x10, 0x4f, 0x7d, 0x40, 0x68, 0x6f, 0x93, 0xe1, 0x7d, 0x72, 0x16,
	0xaf, 0x44, 0xe4, 0xc3, 0xb3, 0xaf, 0xa7, 0xf1, 0x0b, 0xf8, 0x65, 0xfc, 0x0d, 0x7e, 0x0b, 0x8a,
	0xed, 0x2c, 0x5b, 0x01, 0x21, 0x78, 0xaa, 0xcf, 0xbd, 0xe7, 0x5c, 0xe7, 0x9c, 0x5e, 0xc3, 0x81,
	0xac, 0xf8, 0x57, 0xa1, 0xa8, 0x54, 0x2d, 0xb6, 0x24, 0x72, 0x48, 0xe6, 0xc9, 0x8b, 0x5d, 0x89,
	0x9f, 0x4d, 0x4e, 0x2f, 0xda, 0x7a, 0x5d, 0x99, 0xa6, 0x5d, 0x2b, 0x71, 0x59, 0x89, 0x1b, 0xff,
	0x23, 0x73, 0x7f, 0x70, 0xba, 0xe4, 0x64, 0xd7, 0xb6, 0xbb, 0x4a, 0xac, 0x2d, 0xca, 0xcd, 0xe5,
	0x1a, 0xcb, 0x5a, 0x68, 0xe4, 0xb5, 0x74, 0x84, 0x94, 0xc2, 0xf2, 0x83, 0xc0, 0x33, 0xae, 0x50,
	0x33, 0x71, 0x45, 0x4e, 0x60, 0x29, 0x6e, 0x50, 0xa8, 0x86, 0x57, 0xe7, 0x65, 0x11, 0x07, 0xab,
	0x20, 0x9b, 0x30, 0xe8, 0x4b, 0xa7, 0x45, 0xfa, 0x1a, 0x0e, 0x06, 0xbe, 0x96, 0xe4, 0x19, 0x84,
	0xb2, 0x03, 0x71, 0xb0, 0x9a, 0x64, 0xcb, 0xcd, 0x21, 0xed, 0x3f, 0x94, 0x76, 0x1c, 0xe6, 0x9a,
	0x69, 0x66, 0x6f, 0x61, 0xad, 0x69, 0x8a, 0xee, 0x96, 0x27, 0x10, 0xa9, 0xee, 0x3c, 0x5c, 0x31,
	0xb7, 0xf8, 0xb4, 0x48, 0xdf, 0xd8, 0xf9, 0x9e, 0xa9, 0x25, 0x79, 0x0e, 0xa1, 0x6d, 0x59, 0xde,
	0x72, 0x73, 0x34, 0xcc, 0x77, 0x1c, 0xd7, 0x4d, 0x7f, 0x04, 0x10, 0xda, 0x02, 0x39, 0x84, 0xf1,
	0xed, 0xd4, 0x71, 0x59, 0xec, 0x3b, 0x1a, 0xef, 0x3b, 0x22, 0xc7, 0x30, 0x73, 0x33, 0xe3, 0xc9,
	0x2a, 0xc8, 0x16, 0xcc, 0xa3, 0xae, 0xae, 0x91, 0xa3, 0xd1, 0xf1, 0x74, 0x15, 0x64, 0x21, 0xf3,
	0x88, 0xbc, 0x05, 0xb8, 0x50, 0x82, 0xa3, 0x28, 0xce, 0x39, 0xc6, 0x33, 0xfb, 0x59, 0x09, 0x75,
	0x39, 0xd3, 0x3e, 0x67, 0xfa, 0xa9, 0xcf, 0x99, 0x2d, 0x3c, 0x7b, 0x8b, 0x9d, 0xd4, 0xc8, 0xa2,
	0x97, 0xce, 0xff, 0x2e, 0xf5, 0xec, 0x2d, 0xa6, 0xdf, 0xc6, 0x30, 0xed, 0x12, 0xfd, 0xc5, 0xdf,
	0xdd, 0x2c, 0xc7, 0xf7, 0xb2, 0xfc, 0xa3, 0x33, 0x02, 0x53, 0xc5, 0x9b, 0x2f, 0xd6, 0xd7, 0x84,
	0xd9, 0x33, 0x79, 0x08, 0xe1, 0x35, 0xaf, 0x8c, 0x88, 0x43, 0x5b, 0x74, 0x80, 0x3c, 0x85, 0x85,
	0x36, 0x79, 0x5d, 0x22, 0x8a, 0xc2, 0x5a, 0x8d, 0xd8, 0x50, 0xd8, 0x4b, 0x62, 0xfe, 0xff, 0x49,
	0x44, 0xff, 0x90, 0xc4, 0xe6, 0x7b, 0x00, 0xb3, 0x33, 0x67, 0x64, 0x0b, 0x0f, 0x3e, 0xa2, 0x12,
	0xbc, 0xb6, 0x7f, 0xfd, 0xfb, 0x6b, 0xd1, 0xa0, 0x26, 0x8f, 0x69, 0xff, 0x14, 0xa8, 0x6f, 0x8a,
	0x2b, 0x23, 0x34, 0x26, 0x47, 0x43, 0xc3, 0x52, 0xd3, 0xd1, 0xcb, 0x80, 0xbc, 0x83, 0xa8, 0xdf,
	0x67, 0xf2, 0x68, 0x58, 0xae, 0x3b, 0x6f, 0x22, 0x39, 0xfe, 0x5d, 0x59, 0xcb, 0x74, 0xe4, 0xc5,
	0x6e, 0xef, 0xee, 0x8b, 0xfb, 0x55, 0xdf, 0x13, 0xdf, 0xee, 0x75, 0x3a, 0xca, 0x67, 0xd6, 0xe6,
	0xab, 0x9f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x70, 0xa4, 0xac, 0x13, 0xe9, 0x03, 0x00, 0x00,
}
